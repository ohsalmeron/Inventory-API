services:
  # Base de datos
  db:
    image: postgres:14
    container_name: inventory_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    ports:
      - "5432:5432"
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Automatización de respaldos
  db_backup:
    image: postgres:14
    container_name: inventory_db_backup
    restart: always
    env_file:
      - .env
    volumes:
      - inventory_db_backups:/backups
    depends_on:
      - db
    entrypoint: >
      bash -c "
      apt-get update && apt-get install -y cron &&
      echo '0 0 * * * PGPASSWORD=$DB_PASSWORD pg_dump -U $DB_USER -h $DB_HOST $DB_NAME > /backups/inventory_backup_$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).sql' | crontab - &&
      cron -f
      "

  # RESTful API
  api:
    build: .
    container_name: inventory_api
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: "8g"
        reservations:
          cpus: "2.0"
          memory: "4g"

  # Automatización de tests
  tests:
    build:
      context: .
      args:
        MODE: test
    container_name: inventory_api_test
    depends_on:
      - db
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
    volumes:
      - ./coverage:/app/htmlcov
    command: ["pytest", "--cov=app", "--cov-report=html", "tests/"]

  # Tests de carga
  locust:
    image: locustio/locust
    container_name: locust
    ports:
      - "8089:8089"
    command: -f /app/locustfile.py
    volumes:
      - ./locustfile.py:/app/locustfile.py
    depends_on:
      - api

volumes:
  inventory_db_data:
  inventory_db_backups:
  coverage: